// By Kruskal
#include <stdio.h>
#include <vector>
#include <algorithm>

using namespace std;

struct Edge
{
    int start,end,cost;
    bool operator < (const Edge &other) const {
        return cost<other.cost;
    }
};
int p[100001];
int find(int n)
{
    if (n==p[n])
    {
        return n;
    }
    else
        return p[n]=find(p[n]);
}

void merge(int u,int v)
{
    u=find(u);
    v=find(v);
    p[u]=v;
}
int main()
{
    int N,M;
    scanf("%d %d",&N,&M);
    vector<Edge> kruskal(M);
     for (int i=1; i<=N; i++) {
        p[i] = i;
    }
    for(int i=0;i<M;i++)
    {
        scanf("%d %d %d",&kruskal[i].start,&kruskal[i].end,&kruskal[i].cost);
    }
    int ans=0;
    sort(kruskal.begin(),kruskal.end());
    for(int i=0;i<M;i++)
    {
        Edge e=kruskal[i];
        int x=find(e.start);
        int y=find(e.end);
        if (x!=y)
        {
            merge(e.start,e.end);
            ans+=e.cost;
        }
    }
    printf("%d",ans);
    return 0;
}
