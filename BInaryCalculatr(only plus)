/*
학번:
이름:
Visual Studio Version :
*/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

#define PLUS 1
#define MINUS 2

typedef int element;
typedef struct ListNode {
	element data;
	struct ListNode *link;
} ListNode;

typedef struct NumStruct {
	int num_sys;
	int digit;
	int sign;
	ListNode * head;
} NumStruct;

NumStruct* cvtInput2NumStruct(int num, int num_sys);
NumStruct* binarySum(NumStruct* num1, NumStruct* num2);
NumStruct* cvtDec2Bin(NumStruct* num);
NumStruct* cvtBin2Dec(NumStruct* num);
void displayNumStruct(NumStruct* num);

void insert_node(ListNode **phead, ListNode *p, ListNode *new_node);
void remove_node(ListNode **phead, ListNode *p, ListNode *removed);
void display(ListNode *head);
void display_recur(ListNode *head);
ListNode *search(ListNode *head, element x);
ListNode *concat(ListNode *head1, ListNode *head2);
ListNode *reverse(ListNode *head);
ListNode *create_node(element data, ListNode *link);

int main(void)
{
	NumStruct* tmp1;
	NumStruct* tmp2;
	NumStruct* tmp3;
	NumStruct* tmp4;

	int a = 1022;
	int b = 3;

	tmp1 = cvtDec2Bin(cvtInput2NumStruct(a, 10));
	tmp2 = cvtDec2Bin(cvtInput2NumStruct(b, 10));
	tmp3 = binarySum(tmp1, tmp2);
	tmp4 = cvtBin2Dec(tmp3);

	printf("a = %d, ", a);
	displayNumStruct(tmp1);
	printf("b = %d, ", b);
	displayNumStruct(tmp2);
	printf("a + b = ");
	displayNumStruct(tmp3);
	displayNumStruct(tmp4);

	return 0;
}

NumStruct* cvtInput2NumStruct(int num, int num_sys) // 함수 역할 : num을 num_sys의 구조체로 변환 시킬것 구조체를 반환 num : 숫자, num_sys : 진법
{
	NumStruct* tmp;
	// 함수 예외처리(Exception) 필요 - num의 각 자리수는 num_sys보다 크거나 같을 수 없음
	tmp = (NumStruct*)malloc(sizeof(NumStruct));
	// 매개변수로 받은 num, num_sys 정보를 이용하여 구조체를 생성하고 초기화
	// code
	if (num > 0) tmp->sign = PLUS; // 숫자가 0보다 크면 plus
	else tmp->sign = MINUS; // 그 외에는 minus
	tmp->num_sys = num_sys; // 현재 구조체의 진법 : num_sys
	tmp->head = NULL; // 현재 구조체의 포인터가 가르키고 있는 부분은 NULL로 초기화한다.
	tmp->digit = 0; // 현재 구조체의 숫자 개수는 0
	num = abs(num); // num<0일 수에 정수로 바꿔야함
	while (num) // num>0일 때까지 계속 반복
	{
		//printf("%d\n", num);
		if (num % 10 >= num_sys) return NULL; // num이 현재 진법으로 변환되어 있는 상태인데, 각 자리가 num_sys 보다 크면 그건 num_sys 진법으로 나타낸 것이 아니기 때문에 NULL을 반환한다.
		insert_node(&(tmp->head), NULL, create_node(num % 10, NULL)); // 아니면 Simple Linked List에 삽입
		tmp->digit++; // 자리수 UP
		num /= 10; // num을 10으로 나눠주기
	}
	return tmp; // 구조체로 바뀌었던 결과 반환
}

NumStruct* binarySum(NumStruct* num1, NumStruct* num2)
{
	NumStruct* tmp;
	ListNode * node1;
	ListNode * node2;
	ListNode * tmp_node1;
	ListNode * tmp_node2;
	int tmp_digit1;
	int tmp_digit2;
	int carry = 0;
	tmp = (NumStruct*)malloc(sizeof(NumStruct));

	// 함수 예외처리(Exception) 필요 - 입력변수가 모두 2진수여야 함
	// num_sys가 2인 두 NumStruct를 더하여 새로 생성된 NumStruct에 저장
	// 중간에 NumStruct를 10진법으로 변수에 저장했다가 이를 더하여 다시 2진법 NumStruct로 변환하지 않도록 함
	// code
	tmp->head = NULL; // 동일하게 NULL로 초기화
	tmp->num_sys = 2; // 이진수 + 이진수 = 이진수
	int sum = 0; // 합계변수 초기화
	if (!(num1->num_sys == 2 && num2->num_sys == 2)) return NULL; // 만약 둘 다 2가 아니라면 NULL을 반환
	tmp->digit = 0; // 현재 더한 수의 값의 총 숫자수 : 0
	node1 = reverse(num1->head), node2 = reverse(num2->head); 
	// 만약 num1이 111100001 이렇게 되어있으면
	// 구조체에는 1->1->1->1->0->0->0->0->1->NULL 이렇게 저장되어있다.
	// 하지만 실제로 우리가 구현을 할 때에는 뒤에서부터 계산해야함
	// 즉 NULL<-1<-1<-1<-1<-0<-0<-0<-0<-1 이렇게 바꾸어줘야 한다.
	// 이 일을 하는건 reverse 함수
	tmp_node1 = node1, tmp_node2 = node2; // 본격적인 계산을 위해 임시적인 listnode에 삽입 나중에 num1과 num2를 바꿔줄 애가 필요하고, 그거 때문에 잠시 대입했다가 나중에 바꿔줄것
	while (node1 != NULL || node2 != NULL) //  두 포인터 둘다 NULL 이 되면 더하기가 불가능
	{
		sum = carry + (node1 ? node1->data : 0) + (node2 ? node2->data : 0); // carry : 이전의 계산에서 넘어온것, 받아올림 개념 따라서 현재 자리 계산 값은 node1 값 + node2 값 + carryy값
		carry = sum >= 2 ? 1 : 0; // 만약 지금 값이 2보다 크면 받아올림 해줘야함
		sum %= 2; // 진법에 맞추기 위함. 이게 노드로 들어가기 때문이다.
		insert_node(&(tmp->head), NULL, create_node(sum, NULL)); 
		tmp->digit++;
		if (node1) node1 = node1->link; // 다음 자리로 넘어간다.
		if (node2) node2 = node2->link; // 다음 자리로 넘어간다.
	}
	if (carry) insert_node(&(tmp->head), NULL, create_node(carry, NULL)), tmp->digit++;
	// 둘다 NULL이 될 때까지 계산한 후에 carry가 남아있으면 그건 올려줘야 하는것이기 때문에 올려준다.
	num1->head = reverse(tmp_node1), num2->head = reverse(tmp_node2);
	//num1과 num2 포인터에 원래 값을 넣어준다. reverse의 reverse의 원래랑 똑같기 때문에 reverse해서 넣어준다.
	displayNumStruct(tmp);
	return tmp;
}

NumStruct* cvtDec2Bin(NumStruct* num)
{
	NumStruct* tmp;
	ListNode* tmp_node;
	int tmp_digit = num->digit;
	int tmp_value = 0;

	// 함수 예외처리(Exception) 필요 - 입력변수가 10진수여야 함
	// 10진법 NumStruct를 새로 생성된 NumStruct에 2진법으로 저장
	// code
	tmp = (NumStruct*)malloc(sizeof(NumStruct)); // tmp를 동적할당 해준다. 이유는 뒤의 연산에서 나온다.
	if (num->num_sys != 10) return NULL; // 10진수에서 2진수로 바꾸는거기 때문에 10진수가 아니면 pass
	tmp_node = num->head; // 연산을 할 listnode를 가져와서 저장해준다.
	for (int i = 0; i < tmp_digit; i++)
	{
		tmp_value = tmp_value * 10 + tmp_node->data; // 현재 구조체로 나와있는 수가 얼마인지 숫자로 표현해주는 것
		// 1->4->2->3 이면 1423을 표현
		// 1 -> 1*10+4 -> 1*100+4*10+2 -> 1*1000+4*100+10*2+3=1423
		tmp_node = tmp_node->link; // linked list 다음 요소로 넘어간다.
	}
	tmp->head = NULL; // 가르키고 있는것을 NULL로 초기화
	tmp->num_sys = 2; // 2진수
	tmp->sign = PLUS; // 양수
	tmp->digit = 0; // 자리수 0
	while (tmp_value)
	{
		insert_node(&(tmp->head), NULL, create_node(tmp_value%2,NULL)); // 끝자리%2를 노드로 추가해준다. 십진법을 이진법으로 바꾸는 방법 참고
		tmp_value /= 2; // 2로 나눈다.
		tmp->digit++; // 자리수 +1
	}
	// 주어진 방법대로 10진수를 2진수로 바꾸는 것엔 두가지 방법이 있다.
	// 첫번째는 10진수를 2진수로 바꾸되, 그 바꾼 2진수의 표현을 정수로 저장한 것이다.
	// 예를 들면 15 같은 경우엔 이진수로 나타내면 1111인데, 이 경우 숫자 천백십일로 저장한것이다.
	// 하지만 이런 경우 숫자가 조금만 커져도 OverFlow가 나므로 값의 손해를 본다.
	// 이에 대처하기 위해 그냥 바로 10진수에서 2진수로 바꿔주면서 노드를 추가하는 것이다.
	// 본래 의도하는것은 첫번째 풀이였던것 같은데 OverFlow가 떠서 바꾼다.
	return tmp; // 구조체반환
}

NumStruct* cvtBin2Dec(NumStruct* num)
{
	NumStruct* tmp;
	ListNode* tmp_node;
	int tmp_digit = num->digit;
	int tmp_value = 0;
	// 함수 예외처리(Exception) 필요 - 입력변수가 2진수여야 함
	// 2진법 NumStruct를 새로 생성된 NumStruct에 10진법으로 저장
	// code
	if (num->num_sys != 2) return NULL; // 2진수가 아니면 버린다.
	tmp_node = num->head; // 넘겨준다.
	for (int i = 0; i < tmp_digit; i++)
	{
		tmp_value = (tmp_value << 1) + tmp_node->data; // 자리수가 한자리 늘어나면 늘어나기 전의 수는 2배가 된다.
		tmp_node = tmp_node->link; // 다음껄로 넘어간다.
	}
	tmp = cvtInput2NumStruct(tmp_value, 10); // 현재 담긴 값을 10진수로 구조체에 저장한다.
	return tmp;
}
 
void displayNumStruct(NumStruct* num)
{
	// display 함수를 활용하여, 결과화면과 같이 출력되도록 할 것
	// code
	display_recur(num->head); // 구조체 출력
	printf("(%d)\n", num->num_sys); // (진법) 출력
}

// phead: 리스트의 헤드 포인터의 포인터
// p : 선행 노드
// new_node : 삽입될 노드 
void insert_node(ListNode **phead, ListNode *p,
	ListNode *new_node)
{
	if (*phead == NULL) {
		// 공백리스트인 경우
		new_node->link = NULL;
		*phead = new_node;
	}
	else if (p == NULL) {
		// p가 NULL이면 첫번째 노드로 삽입
		new_node->link = *phead;
		*phead = new_node;
	}
	else {
		// p 다음에 삽입
		new_node->link = p->link;
		p->link = new_node;
	}
}

// phead : 헤드 포인터에 대한 포인터 
// p: 삭제될 노드의 선행 노드
// removed: 삭제될 노드 
void remove_node(ListNode **phead, ListNode *p, ListNode *removed)
{
	if (p == NULL) *phead = (*phead)->link;
	else p->link = removed->link;
	free(removed);
}

void display(ListNode *head)
{
	ListNode *p = head;
	while (p != NULL) {
		printf("%d->", p->data);
		p = p->link;
	}
	printf("\n");
}

void display_recur(ListNode *head)
{
	ListNode *p = head;
	if (p != NULL) {
		printf("%d", p->data);
		display_recur(p->link);
	}
}

ListNode *search(ListNode *head, element x)
{
	ListNode *p;
	p = head;
	while (p != NULL) {
		if (p->data == x) return p;  // 탐색 성공
		p = p->link;
	}
	return p;  // 탐색 실패일 경우 NULL 반환
}

ListNode *concat(ListNode *head1, ListNode *head2)
{
	ListNode *p;
	if (head1 == NULL) return head2;
	else if (head2 == NULL) return head1;
	else {
		p = head1;
		while (p->link != NULL) p = p->link;
		p->link = head2;
		return head1;
	}
}

ListNode *reverse(ListNode *head)
{
	// 순회 포인터로 p, q, r을 사용
	ListNode *p, *q, *r;
	p = head;         // p는 역순으로 만들 리스트
	q = NULL;         // q는 역순으로 만들 노드
	while (p != NULL) {
		r = q;          // r은 역순으로 된 리스트.    r은 q, q는 p를 차례로 따라간다.
		q = p;
		p = p->link;
		q->link = r;      // q의 링크 방향을 바꾼다.
	}
	return q; 	// q는 역순으로 된 리스트의 헤드 포인터
}
// 노드를 동적으로 생성하는 프로그램
ListNode *create_node(element data, ListNode *link)
{
	ListNode *new_node;
	new_node = (ListNode *)malloc(sizeof(ListNode));
	if (new_node == NULL) {
		fprintf(stderr, "메모리 할당 에러\n");
		exit(1);
	}
	new_node->data = data;
	new_node->link = link;
	return(new_node);
}
